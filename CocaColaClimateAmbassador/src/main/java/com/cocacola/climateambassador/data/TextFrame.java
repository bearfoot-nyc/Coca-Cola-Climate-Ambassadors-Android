package com.cocacola.climateambassador.data;

import java.util.List;
import com.cocacola.climateambassador.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TEXT_FRAME.
 */
public class TextFrame {

    private Long id;
    private String title;
    private String bodyText;
    private Long caseId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TextFrameDao myDao;

    private List<SubtitleTextPair> subtitleTextPairs;

    public TextFrame() {
    }

    public TextFrame(Long id) {
        this.id = id;
    }

    public TextFrame(Long id, String title, String bodyText, Long caseId) {
        this.id = id;
        this.title = title;
        this.bodyText = bodyText;
        this.caseId = caseId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTextFrameDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getBodyText() {
        return bodyText;
    }

    public void setBodyText(String bodyText) {
        this.bodyText = bodyText;
    }

    public Long getCaseId() {
        return caseId;
    }

    public void setCaseId(Long caseId) {
        this.caseId = caseId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SubtitleTextPair> getSubtitleTextPairs() {
        if (subtitleTextPairs == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SubtitleTextPairDao targetDao = daoSession.getSubtitleTextPairDao();
            List<SubtitleTextPair> subtitleTextPairsNew = targetDao._queryTextFrame_SubtitleTextPairs(id);
            synchronized (this) {
                if(subtitleTextPairs == null) {
                    subtitleTextPairs = subtitleTextPairsNew;
                }
            }
        }
        return subtitleTextPairs;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSubtitleTextPairs() {
        subtitleTextPairs = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
