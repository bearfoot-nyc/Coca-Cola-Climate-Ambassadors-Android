package com.cocacola.climateambassador.data;

import java.util.List;
import com.cocacola.climateambassador.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MODULE.
 */
public class Module {

    private Long id;
    private long sectionId;
    private long documentId;
    private Long bulletPointId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ModuleDao myDao;

    private BulletPointFrame bulletPointFrame;
    private Long bulletPointFrame__resolvedKey;

    private List<Document> documents;

    public Module() {
    }

    public Module(Long id) {
        this.id = id;
    }

    public Module(Long id, long sectionId, long documentId, Long bulletPointId) {
        this.id = id;
        this.sectionId = sectionId;
        this.documentId = documentId;
        this.bulletPointId = bulletPointId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getModuleDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getSectionId() {
        return sectionId;
    }

    public void setSectionId(long sectionId) {
        this.sectionId = sectionId;
    }

    public long getDocumentId() {
        return documentId;
    }

    public void setDocumentId(long documentId) {
        this.documentId = documentId;
    }

    public Long getBulletPointId() {
        return bulletPointId;
    }

    public void setBulletPointId(Long bulletPointId) {
        this.bulletPointId = bulletPointId;
    }

    /** To-one relationship, resolved on first access. */
    public BulletPointFrame getBulletPointFrame() {
        Long __key = this.bulletPointId;
        if (bulletPointFrame__resolvedKey == null || !bulletPointFrame__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BulletPointFrameDao targetDao = daoSession.getBulletPointFrameDao();
            BulletPointFrame bulletPointFrameNew = targetDao.load(__key);
            synchronized (this) {
                bulletPointFrame = bulletPointFrameNew;
            	bulletPointFrame__resolvedKey = __key;
            }
        }
        return bulletPointFrame;
    }

    public void setBulletPointFrame(BulletPointFrame bulletPointFrame) {
        synchronized (this) {
            this.bulletPointFrame = bulletPointFrame;
            bulletPointId = bulletPointFrame == null ? null : bulletPointFrame.getId();
            bulletPointFrame__resolvedKey = bulletPointId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Document> getDocuments() {
        if (documents == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DocumentDao targetDao = daoSession.getDocumentDao();
            List<Document> documentsNew = targetDao._queryModule_Documents(id);
            synchronized (this) {
                if(documents == null) {
                    documents = documentsNew;
                }
            }
        }
        return documents;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDocuments() {
        documents = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
