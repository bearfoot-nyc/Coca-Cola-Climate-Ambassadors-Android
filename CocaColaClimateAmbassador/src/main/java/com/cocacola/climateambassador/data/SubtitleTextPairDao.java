package com.cocacola.climateambassador.data;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.cocacola.climateambassador.data.SubtitleTextPair;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SUBTITLE_TEXT_PAIR.
*/
public class SubtitleTextPairDao extends AbstractDao<SubtitleTextPair, Void> {

    public static final String TABLENAME = "SUBTITLE_TEXT_PAIR";

    /**
     * Properties of entity SubtitleTextPair.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "title", false, "TITLE");
        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
        public final static Property TextFrameId = new Property(2, long.class, "textFrameId", false, "TEXT_FRAME_ID");
    };

    private Query<SubtitleTextPair> textFrame_SubtitleTextPairsQuery;

    public SubtitleTextPairDao(DaoConfig config) {
        super(config);
    }
    
    public SubtitleTextPairDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SUBTITLE_TEXT_PAIR' (" + //
                "'TITLE' TEXT," + // 0: title
                "'TEXT' TEXT," + // 1: text
                "'TEXT_FRAME_ID' INTEGER NOT NULL );"); // 2: textFrameId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SUBTITLE_TEXT_PAIR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SubtitleTextPair entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(2, text);
        }
        stmt.bindLong(3, entity.getTextFrameId());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public SubtitleTextPair readEntity(Cursor cursor, int offset) {
        SubtitleTextPair entity = new SubtitleTextPair( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // title
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // text
            cursor.getLong(offset + 2) // textFrameId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SubtitleTextPair entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTextFrameId(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(SubtitleTextPair entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(SubtitleTextPair entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "subtitleTextPairs" to-many relationship of TextFrame. */
    public List<SubtitleTextPair> _queryTextFrame_SubtitleTextPairs(long textFrameId) {
        synchronized (this) {
            if (textFrame_SubtitleTextPairsQuery == null) {
                QueryBuilder<SubtitleTextPair> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TextFrameId.eq(null));
                textFrame_SubtitleTextPairsQuery = queryBuilder.build();
            }
        }
        Query<SubtitleTextPair> query = textFrame_SubtitleTextPairsQuery.forCurrentThread();
        query.setParameter(0, textFrameId);
        return query.list();
    }

}
