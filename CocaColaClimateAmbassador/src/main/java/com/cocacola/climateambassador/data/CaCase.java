package com.cocacola.climateambassador.data;

import java.util.List;
import com.cocacola.climateambassador.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table CA_CASE.
 */
public class CaCase {

    private Long id;
    private String title;
    private String bodyText;
    private long moduleId;
    private Long bulletPointFrameId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CaCaseDao myDao;

    private BulletPointFrame bulletPointFrame;
    private Long bulletPointFrame__resolvedKey;

    private List<TextFrame> textFrames;
    private List<Document> caseStudies;

    public CaCase() {
    }

    public CaCase(Long id) {
        this.id = id;
    }

    public CaCase(Long id, String title, String bodyText, long moduleId, Long bulletPointFrameId) {
        this.id = id;
        this.title = title;
        this.bodyText = bodyText;
        this.moduleId = moduleId;
        this.bulletPointFrameId = bulletPointFrameId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCaCaseDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getBodyText() {
        return bodyText;
    }

    public void setBodyText(String bodyText) {
        this.bodyText = bodyText;
    }

    public long getModuleId() {
        return moduleId;
    }

    public void setModuleId(long moduleId) {
        this.moduleId = moduleId;
    }

    public Long getBulletPointFrameId() {
        return bulletPointFrameId;
    }

    public void setBulletPointFrameId(Long bulletPointFrameId) {
        this.bulletPointFrameId = bulletPointFrameId;
    }

    /** To-one relationship, resolved on first access. */
    public BulletPointFrame getBulletPointFrame() {
        Long __key = this.bulletPointFrameId;
        if (bulletPointFrame__resolvedKey == null || !bulletPointFrame__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BulletPointFrameDao targetDao = daoSession.getBulletPointFrameDao();
            BulletPointFrame bulletPointFrameNew = targetDao.load(__key);
            synchronized (this) {
                bulletPointFrame = bulletPointFrameNew;
            	bulletPointFrame__resolvedKey = __key;
            }
        }
        return bulletPointFrame;
    }

    public void setBulletPointFrame(BulletPointFrame bulletPointFrame) {
        synchronized (this) {
            this.bulletPointFrame = bulletPointFrame;
            bulletPointFrameId = bulletPointFrame == null ? null : bulletPointFrame.getId();
            bulletPointFrame__resolvedKey = bulletPointFrameId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TextFrame> getTextFrames() {
        if (textFrames == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TextFrameDao targetDao = daoSession.getTextFrameDao();
            List<TextFrame> textFramesNew = targetDao._queryCaCase_TextFrames(id);
            synchronized (this) {
                if(textFrames == null) {
                    textFrames = textFramesNew;
                }
            }
        }
        return textFrames;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTextFrames() {
        textFrames = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Document> getCaseStudies() {
        if (caseStudies == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DocumentDao targetDao = daoSession.getDocumentDao();
            List<Document> caseStudiesNew = targetDao._queryCaCase_CaseStudies(id);
            synchronized (this) {
                if(caseStudies == null) {
                    caseStudies = caseStudiesNew;
                }
            }
        }
        return caseStudies;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCaseStudies() {
        caseStudies = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
